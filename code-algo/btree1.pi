#Btree using collection key,value pairs
class TreeNode:
    def __init__(self,key,val,l=None,r=None,parent=None):
        self.key = key
        self.val = val
        self.l = l
        self.r = r
        self.parent = parent

    def hasl(self):
        return self.l

    def hasr(self):
        return self.r

    def isl(self):
        return self.parent and self.parent.l == self

    def isr(self):
        return self.parent and self.parent.r == self

    def isRoot(self):
        return not self.parent

    def isLeaf(self):
        return not (self.r or self.l)

    def hasAnyren(self):
        return self.r or self.l

    def hasBothren(self):
        return self.r and self.l

    def replaceNodeData(self,key,value,lc,rc):
        self.key = key
        self.val = value
        self.l = lc
        self.r = rc
        if self.hasl():
            self.l.parent = self
        if self.hasr():
            self.r.parent = self


class BST:

    def __init__(self):
        self.root = None
        self.size = 0

    def length(self):
        return self.size

    def __len__(self):
        return self.size

    def put(self,key,val):
        if self.root:
            self._put(key,val,self.root)
        else:
            self.root = TreeNode(key,val)
        self.size = self.size + 1

    def _put(self,key,val,curNode):
        if key < curNode.key:
            if curNode.hasl():
                   self._put(key,val,curNode.l)
            else:
                   curNode.l = TreeNode(key,val,parent=curNode)
        else:
            if curNode.hasr():
                   self._put(key,val,curNode.r)
            else:
                   curNode.r = TreeNode(key,val,parent=curNode)

    def __setitem__(self,k,v):
       self.put(k,v)

    def get(self,key):
       if self.root:
           res = self._get(key,self.root)
           if res:
                  return res.val
           else:
                  return None
       else:
           return None

    def _get(self,key,curNode):
       if not curNode:
           return None
       elif curNode.key == key:
           return curNode
       elif key < curNode.key:
           return self._get(key,curNode.l)
       else:
           return self._get(key,curNode.r)

    def __getitem__(self,key):
       return self.get(key)

    def __contains__(self,key):
       if self._get(key,self.root):
           return True
       else:
           return False

    def delete(self,key):
      if self.size > 1:
         nodeToRemove = self._get(key,self.root)
         if nodeToRemove:
             self.remove(nodeToRemove)
             self.size = self.size-1
         else:
             raise KeyError('Error, key not in tree')
      elif self.size == 1 and self.root.key == key:
         self.root = None
         self.size = self.size - 1
      else:
         raise KeyError('Error, key not in tree')

    def __delitem__(self,key):
       self.delete(key)

    def findMax(self):
      cur = self.root
      while cur.hasr():
          cur = cur.r
      return cur.val

    def findMin(self):
      cur = self.root
      while cur.hasl():
          cur = cur.l
      return cur.val

    def remove(self,curNode):
         if curNode.isLeaf(): #leaf
           if curNode == curNode.parent.l:
               curNode.parent.l = None
           else:
               curNode.parent.r = None
         elif curNode.hasBothren(): #interior
           succ = curNode.findSuccessor()
           succ.spliceOut()
           curNode.key = succ.key
           curNode.val = succ.val

         else: # this node has one child
           if curNode.hasl():
             if curNode.isl():
                 curNode.l.parent = curNode.parent
                 curNode.parent.l = curNode.l
             elif curNode.isr():
                 curNode.l.parent = curNode.parent
                 curNode.parent.r = curNode.l
             else:
                 curNode.replaceNodeData(curNode.l.key,
                                    curNode.l.val,
                                    curNode.l.l,
                                    curNode.l.r)
           else:
             if curNode.isl():
                 curNode.r.parent = curNode.parent
                 curNode.parent.l = curNode.r
             elif curNode.isr():
                 curNode.r.parent = curNode.parent
                 curNode.parent.r = curNode.r
             else:
                 curNode.replaceNodeData(curNode.r.key,
                                    curNode.r.val,
                                    curNode.r.l,
                                    curNode.r.r)

    def display(self):
        self.displayInorder(self.root)
        
    def displayInorder(self,node):
        if (node.l):
            self.displayInorder(node.l)
        print(node.key,node.val)
        if (node.r):
            self.displayInorder(node.r)



myTree = BST()
myTree.put(4,10)
myTree.put(5,15)
myTree.put(3,25)
print(myTree.get(3))
myTree.put(1,23)
myTree.delete(3)
myTree.display()
print(myTree.findMin())
print(myTree.findMax())
print(myTree.get(5))
